[SYS]
distribution: y
batch: y
root_path: ~/Code/opt_1/
qsub_path: /usr/local/torque/bin/
qsub_queue: hpc
qsub_options: 
overwrite: n
nodes: 1
mpi_run: openmpi/intel
mpi_compiler: intel-icc/2013-64
cluster_options: 
proc_option: -np
dist_script: ~/Code/GrOW/parallel_jobs/distribution1.sh
batch_script: ~/Code/GrOW/parallel_jobs/sim_execute1.bat


########## Quantum Mechanical (QM) section ##########
[QM_MM]
bin_path: ~/Code/input/octane_new_96-conformations/
steering_script: ~/Code/GrOW/simulation/grow_sander_ff_opt.py
topology: ~/Code/input/ExTrM.template.dat
target: ~/Code/input/octane_molecule_target_energies.txt
leaprc_file: ~/Code/input/leaprc.extrm
w2p_file: ~/Code/input/leaprc.extrm.w2p
mol2_file: ~/Code/input/molec.extrm.bcc.mol2
substance: octane
weights: 0.01


########## Physical Properties (PP) section ##########
[MD]
substance: octane
program: gromacs
bin_path: gromacs/2016.3
steering_script: ~/Code/GrOW/simulation/mkjobequigromacs_gmx.sh
target: ~/Code/input/octane_density.target
properties: density
# different temperatures in K
NPT_temperature: 293.15
NPT_pressure: 1.0
NPT_initial_densities: 0.7
weights = 1.0
molecules: 296
mass: 114.23

# topology dummy file (topol.top)
topology: ~/Code/input/grow_octane_gromacs_inputfiles/topol.top
# coordinate file (structure.gro (maybe .pdb?))
coordinates: ~/Code/input/grow_octane_gromacs_inputfiles/octane_box.gro
# configuration file (.mdp) for energy minimization (gmx grompp -f minim.mdp -c structure.gro -p topol.top -o em.tpr; gmx mdrun -v -deffnm em)
emin_in: ~/Code/input/grow_octane_gromacs_inputfiles/minim.mdp
# configuration file (.mdp) for "pre-pre-equilibration" aka NVT ensemble (gmx grompp -f nvt.mdp -c em.gro -p topol.top -o nvt.tpr; gmx mdrun -v -deffnm nvt)
prepreequi_in: ~/Code/input/grow_octane_gromacs_inputfiles/nvt.mdp
# configuration file (.mdp) for "(pre-)equilibration" aka NPT ensemble (gmx grompp -f npt.mdp -c nvt.gro -t nvt.cpt -p topol.top -o npt.tpr; gmx mdrun -v -deffnm npt)
equi_in: ~/Code/input/grow_octane_gromacs_inputfiles/npt.mdp
# perform an equilibration (y)es or (n)o ?
equilib: y
# if equilib = y: size of time window for equilibration in percent (0.0 - 100.0) 
time_window: 70
# if equilib = y: tolerated statistical uncertainty for the potential energy (FLOAT!)
s_pot: 0.01
# if equilib = y && properties = density: tolerated statistical uncertainty for the density (FLOAT!)
s_rho: 0.005
# number of timesteps for equilibrium (INTEGER!)
nof_steps: 25000
# indicate the number of time steps 'xtcout', after which the simulated property is considered as statistically independent from the previous one
xtcout: 1000
# size of time step [ps] (FLOAT!)
timestep: 0.002
# specify factor for the length of the preequilibration run (FLOAT!)
preequi_steps_fac: 4
# specify factor for the time step of the preequilibration run (FLOAT!)
preequi_timestep_fac: 1
# specify factor for the length of the production run (FLOAT!)
prod_steps_fac: 400.0

test_sim: n 
fits: n
VLE: n

##### different properties (than density) #####
# file for parameters to be optimized (maybe 'par_file_name' instead of 'parameters')
# tolerated statistical uncertainty for 'non-bonded' (only needed if 'vapor' in 'properties') 
#s_nb: 0.01 ADAPT if used!
# if "diff_cat", "diff_an", "reorient_time", "vapor" or "viscosity" in properties
#diff_structure:  ../input/C2mimNTf2_a2u_all.str ADAPT if used!
# if "diff_cat", "diff_an", "reorient_time", "vapor" or "viscosity" in properties
#moscito_bin_path: ADAPT if used!
# if "diff_cat", "diff_an", "reorient_time", "vapor" or "viscosity" in properties
#diff_system: ../input/C2mimNTf2_a2u_all.sys ADAPT if used!
# if "diff_cat", "diff_an", "reorient_time", "vapor" or "viscosity" in properties
#fitpoly_bin_path: ADAPT if used!
# if "vapor" in properties
#moscito_par_file: ../input/moscito.par ADAPT if used!
# if "diff_cat" or "diff_an" in properties
#diff_tmax: 500 ADAPT if used!
#optoutpath: final_out ADAPT if used!
#tmppath: tmp ADAPT if used!
#outpath: out ADAPT if used!
#moscito_bin_path: /home/koedderm/software/MOSCITO/bin/ ADAPT if used!
#fitpoly_bin_path: /home/koedderm/software/MOSCITO/bin/ ADAPT if used!


[OPT]
objective_function: PhysProp_QMMM_Loss
optimization_problem: Molecular_Simulation_Optimization_Problem
weight_mode = normalize
method: Steepest_Descent
cg = polak_ribiere
constraints: Force_Field_Constraints
parameters: ~/Code/input/octane.para
parallelization = 1
stop_eval = 25
p_norm = 2.0
limit = 0.0001
eta = 0.001
search_pattern = 10.0 0.9 0.75 0.25 0.05 0.03 0.0
search_pattern_mode = cycle
model_building_evaluations = 35
restart = 0
#?exploration_mode = cosmos
workflow: optimization
param_order: sigma epsilon
param_number: 2 2
boundary: 80 80
fits: n
fits_performed: n
gradient = marco
h = 0.01
sl_method = armijo
sigma = 0.2
max_armijo = 10
number_of_parallel_armijo_evaluations = 1
multipole: quadrupole
total_charge: 0.0
# from old PP-Opt section
#efficiency: n
#levenberg: n
#search_pattern = 0.000001 0.0 0.0 0.0 0.0 0.0 0.01 0.1 0.5
#search_pattern_mode = cycle
#model_building_evaluations = 10
#gradient: numerical


